{"version":3,"sources":["components/NavBar/index.js","components/Col/index.js","components/Game/index.js","components/Row/index.js","components/ScoreInfo/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Col","props","children","Game","key","id","onClick","handleClick","clicked","alt","name","src","image","Row","ScoreInfo","score","topScore","message","App","state","squares","one","forEach","index","setState","sort","Math","random","newScore","newTopScore","this","map","square","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"4xBAsBeA,MAnBf,WACE,OACF,yBAAKC,UAAU,yBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,gBAEF,yBAAKD,UAAU,iBACb,wBAAIA,UAAU,gBAAd,gCAEF,yBAAKA,UAAU,qB,MCFJE,MARf,SAAaC,GACX,OACE,yBAAKH,UAAW,YAAhB,IAA6BG,EAAMC,W,MCSxBC,MAXf,SAAcF,GACZ,OACE,yBAAKH,UAAU,gBAAgBM,IAAKH,EAAMI,GAAIC,QAAS,kBAAML,EAAMM,YAAYN,EAAMI,GAAGJ,EAAMO,WAC5F,yBAAKV,UAAU,iBACb,yBAAKW,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,MAAOP,GAAIJ,EAAMS,U,MCG3CG,MAPf,SAAaZ,GACX,OACE,yBAAKH,UAAW,OAAhB,IAAwBG,EAAMC,SAA9B,M,MCYWY,MAdf,SAAmBb,GACjB,OACI,yBAAKH,UAAU,aACb,wBAAIA,UAAU,yBAAd,eACA,6BACA,sCAAYG,EAAMc,OAClB,6BACA,0CAAgBd,EAAMe,UACtB,6BACA,wBAAIX,GAAG,WAAWJ,EAAMgB,W,OCgFjBC,E,4MA9EbC,MAAQ,CACNJ,MAAO,EACPC,SAAW,EACXI,UACAH,QAAU,6B,EAGZV,YAAa,SAACF,EAAIG,GAChB,IAAMa,EAAM,EAAKF,MAAMC,QAEvB,GAAGZ,EAIC,OAHAa,EAAIC,SAAQ,SAACF,EAAQG,GACnBF,EAAIE,GAAOf,SAAU,KAEhB,EAAKgB,SAAS,CACnBJ,QAASC,EAAII,MAAK,kBAAMC,KAAKC,SAAW,MACxCZ,MAAO,EACPE,QAAS,6BAIXI,EAAIC,SAAQ,SAACF,EAAQG,GACdlB,IAAOe,EAAQf,KAChBgB,EAAIE,GAAOf,SAAS,MAH1B,MAOsB,EAAKW,MAAxBH,EAPH,EAOGA,SACDY,EARF,EAOab,MACQ,EACnBc,EAAcD,EAAWZ,EAAWY,EAAWZ,EAErD,OAAO,EAAKQ,SAAS,CACjBJ,QAASC,EAAII,MAAK,kBAAMC,KAAKC,SAAW,MACxCZ,MAAOa,EACPZ,SAAUa,EACVZ,QAAS,wB,uDAOP,IAAD,OACP,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,KACA,kBAAC,EAAD,KACA,kBAAC,EAAD,KACCa,KAAKX,MAAMC,QAAQW,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CAAMtB,KAAMsB,EAAOtB,KACjBE,MAAOoB,EAAOpB,MACdR,IAAK4B,EAAO3B,GACZA,GAAI2B,EAAO3B,GACXE,YAAa,EAAKA,YAClBC,QAAUwB,EAAOxB,eAIrB,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAYS,QAASa,KAAKX,MAAMF,QACpBF,MAASe,KAAKX,MAAMJ,MACpBC,SAAYc,KAAKX,MAAMH,kB,GAhEvBiB,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMlC,c","file":"static/js/main.95ddfd93.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n<nav className=\"navbar navbar-inverse\">\r\n  <div className=\"container-fluid\">\r\n    <div className=\"navbar-header\">\r\n      <a className=\"navbar-brand\" href=\"/\">Clicky Game</a>\r\n    </div>\r\n    <div className=\"navbar-header\">\r\n      <h3 className=\"navbar-brand\">Click on the image to start</h3>\r\n    </div>\r\n    <div className=\"navbar-header\">\r\n      \r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n  );\r\n}\r\n\r\nexport default NavBar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Col(props) {\r\n  return (\r\n    <div className= \"col-md-6\"> {props.children}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Col;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Game(props) {\r\n  return (\r\n    <div className=\"card col-md-3\" key={props.id} onClick={() => props.handleClick(props.id,props.clicked)}>\r\n      <div className=\"img-container\">\r\n        <img alt={props.name} src={props.image} id={props.name}/>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default Game;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Row(props) {\r\n  return (\r\n    <div className= \"row\"> {props.children} </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Row;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction ScoreInfo(props) {\r\n  return (\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4 text-center\">Clicky Game</h1>\r\n        <hr></hr>\r\n        <h2>Score: {props.score}</h2>\r\n        <hr></hr>\r\n        <h2>Top Score: {props.topScore}</h2>\r\n        <hr></hr>\r\n        <h2 id=\"message\">{props.message}</h2>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default ScoreInfo;","import React, { Component } from \"react\";\nimport './App.css';\nimport NavBar from \"./components/NavBar\";\nimport Col from \"./components/Col\";\nimport Game from \"./components/Game\";\nimport Row from \"./components/Row\";\nimport ScoreInfo from \"./components/ScoreInfo\";\nimport squares from \"./squares.json\";\n\n\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore : 0,\n    squares,\n    message : \"Click on square to start!\"\n  };\n\n  handleClick =(id, clicked) => {\n    const one = this.state.squares\n  \n    if(clicked){\n        one.forEach((squares,index) =>{\n          one[index].clicked = false;\n        });\n        return this.setState({\n          squares: one.sort(() => Math.random() - 0.5),\n          score: 0,\n          message: \"Wrong! Please Try again!\"\n        })\n      }\n    else{\n        one.forEach((squares,index) =>{\n            if(id === squares.id){\n              one[index].clicked =true;\n            }\n        })\n    \n    const {topScore, score} = this.state;\n    const newScore = score + 1;\n    const newTopScore = newScore > topScore ? newScore : topScore;\n    \n    return this.setState({\n        squares: one.sort(() => Math.random() - 0.5),\n        score: newScore,\n        topScore: newTopScore,\n        message: \"Correct! Continue!\"\n    })\n          \n  }   \n     \n  };\n\nrender() {\n  return (\n    <div>\n      <NavBar />\n      <Row>\n      <Col>\n      <Row>\n      {this.state.squares.map(square => (\n        <Game name={square.name} \n          image={square.image}\n          key={square.id}\n          id={square.id}\n          handleClick={this.handleClick}\n          clicked ={square.clicked} />  \n        ))}\n      </Row>\n      </Col>\n      <Col> \n      <ScoreInfo  message={this.state.message} \n                  score = {this.state.score} \n                  topScore = {this.state.topScore}/>\n       </Col>\n      </Row>\n      \n      \n      \n      \n      \n\n    </div>\n    \n    \n  )};\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}